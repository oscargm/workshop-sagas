(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{407:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(37),l=n(113),s=n(403),i=n(111),c=n(112),u=n(402);t.default=function(){return r.a.createElement("div",null,r.a.createElement(u.a,{active:"generators"}),r.a.createElement(c.a,null,"First of all, you can open this website in your browser:"," ",r.a.createElement(o.c,{href:"http://workshop-sagas.limenius.com"},"http://workshop-sagas.limenius.com/"),"."),r.a.createElement(i.a,{fontSize:5},"Fundamentals of generators"),r.a.createElement(c.a,null,"Let's review generators, as sagas are built upon this feature of JavaScript."),r.a.createElement(c.a,null,"Open"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/first-gen-n5sl5",target:"sandbox"},"this Codesandbox with our first generator"),"."),r.a.createElement(i.a,{fontSize:3},"Passing values"),r.a.createElement(c.a,null,"We can also pass values to a generator, let's see how this works:"),r.a.createElement(c.a,null,"Open"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/passvalues-gen-dd6pg",target:"sandbox"},"this Codesandbox about passing values to a generator"),"."),r.a.createElement(i.a,{fontSize:3},"Infinite? loops"),r.a.createElement(c.a,null,"So far the examples are based in repetition of lines and are finite, but we can have infinite generators too"),r.a.createElement(c.a,null,"Open"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/loop-gen-mxgdc",target:"sandbox"},"this Codesandbox with an infinite generator"),"."),r.a.createElement(s.a,{code:n(426)},r.a.createElement(c.a,null,"Writting ",r.a.createElement("code",null,"it.next()")," manually is repetitive too. Can we map an array so we pass its values to the generator and get back an array with the results of the iterations?")),r.a.createElement(i.a,{fontSize:3},"Termination"),r.a.createElement(s.a,{code:"export function* acceptsValues() {\n   let x = 0;\n   while (true) {\n     x += yield x;\n     // Make this generator terminate if x > 10\n     if (x>100) {\n       return x;\n     }\n   }\n }"},r.a.createElement(c.a,null,"Let's conditionally finish the execution of the generator. Open"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/finish-inside-gen-russ1",target:"sandbox"},"this Codesandbox")," ","and terminate the iterator from the inside of the generator when"," ",r.a.createElement("code",null,"x > 10"))),r.a.createElement(c.a,null,"We can also terminate the iterator from the runner. Open again:"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/first-gen-n5sl5",target:"sandbox"},"this Codesandbox"),". What happens if instead of ",r.a.createElement("code",null,"it.next()")," we call"," ",r.a.createElement("code",null,"it.return()"),"?"),r.a.createElement(s.a,{code:n(427)},r.a.createElement(c.a,null,"Open"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/finish-in-runner-gen-vj02n",target:"sandbox"},"this Codesandbox")),r.a.createElement(c.a,null,"Alicia will use the generator adding 10 values to it. Then, Roberto will add 10 more values to it. Can we change the code so that when the value in a runner is ",r.a.createElement("code",null,"result > max"),", that runner terminates the iterator?"),r.a.createElement(c.a,null,"In this case this will mean that Alicia will add values until 20, and then Roberto won't be able to use the iterator anymore.")),r.a.createElement(c.a,null,"In the last exercise, what happens if we put a"," ",r.a.createElement("code",null,"try","{","...} finally ","{",'console.log("I die here!")} in the generator?')),r.a.createElement(i.a,{fontSize:3},"Promises & Async"),r.a.createElement(c.a,null,"Generators really shine when combined with promises to orchestrate async flows."),r.a.createElement(c.a,null,"Open"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/promises-gen-g1ock",target:"sandbox"},"this Codesandbox")),r.a.createElement(s.a,{code:n(428)},r.a.createElement(c.a,null,"Can you resolve the promise in the runner, and pass it back to the generator to get ",r.a.createElement("code",null,"3*3/2"),"?")),r.a.createElement(c.a,null,"Let's see a more complex example and discuss it"),r.a.createElement(c.a,null,"Open"," ",r.a.createElement(o.c,{href:"https://codesandbox.io/s/complex-runner-gen-z20in",target:"sandbox"},"this Codesandbox")),r.a.createElement(l.a,{to:"/effects",title:"Go to the next section"}))}},426:function(e,t){e.exports="const result = [1, 20, 300, 4000].map(value => it.next(value).value)\nconsole.log(result)\n"},427:function(e,t){e.exports='import { sum } from "./generator";\n\nconst it = sum();\n\nconst values = [...Array(10).keys()].map(i => i + 1);\n\nconst runner = (max, name) => {\n  for (let x of values) {\n    const result = it.next(x);\n    if (result.done) {\n      return;\n    }\n    console.log(`${name} adds ${x} and gets ${result.value}`);\n    if (result.value > max) {\n      it.return();\n    }\n  }\n};\n\nrunner(20, "alicia");\nrunner(30, "roberto");\n'},428:function(e,t){e.exports='import { halfPowerize } from "./generator";\n\nconst it = halfPowerize();\n\nit.next();\n\nconst result = it.next(3);\n\nconsole.log(result.value);\n\nresult.value\n  .then(x => {\n    const halfPowed = it.next(x);\n    console.log(halfPowed.value);\n  })\n  .catch(e => console.log("error", e));\n'}}]);
//# sourceMappingURL=component---src-pages-index-js-b322a44ac5e914e16600.js.map