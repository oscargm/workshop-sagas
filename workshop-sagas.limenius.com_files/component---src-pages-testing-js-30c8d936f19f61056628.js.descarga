(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{408:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),s=n(37),r=n(405),c=n(111),l=n(112),i=n(101),m=n(403),u=n(404),d=n(402);t.default=function(){return o.a.createElement("div",null,o.a.createElement(d.a,{active:"testing"}),o.a.createElement(c.a,{fontSize:5},"Testing sagas"),o.a.createElement(c.a,{fontSize:3},"Context"),o.a.createElement(u.a,null,o.a.createElement(l.a,null,"Before we continue, set the contents of ",o.a.createElement("code",null,"rootSaga")," to"," ",o.a.createElement(s.c,{href:"https://gist.github.com/nacmartin/57a7584d4681ebf100c819416fa66400"},"this gist."))),o.a.createElement(l.a,null,"First of all, there is a small problem with that"," ",o.a.createElement("code",null,'const socket = yield call(io,"http://localhost:3001");'),"."),o.a.createElement(l.a,null,"There are dependencies, like ",o.a.createElement("code",null,"io"),", that are going to be difficult to handle during testing. We could use a mock, but we can avoid that as well using context and make our sagas less dependant of the external world."),o.a.createElement(l.a,null,"Check this out. When we create our sagas in ",o.a.createElement("code",null,"makeStore.js")," we can provide a context:"),o.a.createElement(i.a,{code:'import io from "socket.io-client";\n      \n      //...\n\n      const sagaMiddleware = createSagaMiddleware({ context: { io } });'}),o.a.createElement(l.a,null,"And then we can do in our ",o.a.createElement("code",null,"rootSaga.js"),":"),o.a.createElement(i.a,{code:'function* wsEmitter() {\n      const io = yield effects.getContext("io");\n      return eventChannel(function(emitter) {\n        const socket = io("http://localhost:3001");\n        socket.on("disconnect", reason => {\n          emitter(END);\n          socket.close();\n        });\n        socket.on("message", event => emitter(event));\n        // The subscriber must return an unsubscribe function\n        return () => {\n          socket.close();\n        };\n      });\n    }'}),o.a.createElement(c.a,{fontSize:3},"Testing with generators"),o.a.createElement(l.a,null,"Since redux saga's effects are declarative, we can easily test sagas without much hassle. For instance, copy this code into"," ",o.a.createElement("code",null,"src/sagas/rootSaga.test.js")," and run:"),o.a.createElement(r.a,null,"yarn test"),o.a.createElement(i.a,{code:'\nimport { rootSaga } from "./rootSaga";\nimport * as effects from "redux-saga/effects";\nimport * as constants from "../actions/constants";\nimport { processTask } from "./rootSaga";\n\ntest("it should fork processTask and wsHandler", () => {\n  const it = rootSaga();\n  expect(it.next().value).toEqual(\n    effects.takeEvery(constants.TASK_PROCESS, processTask)\n  );\n});'}),o.a.createElement(l.a,null,"As you see, knowing how generators work is pretty handy."),o.a.createElement(m.a,{code:'test("it should fork processTask and wsHandler", () => {\n  const it = rootSaga();\n  expect(it.next().value).toEqual(\n    effects.takeEvery(constants.TASK_PROCESS, processTask)\n  );\n  expect(it.next().value).toEqual(effects.fork(wsHandler));\n  expect(it.next().done);\n});'},o.a.createElement(l.a,null,"Can you test the next effect as well (",o.a.createElement("code",null,"fork(wsHandler)"),")?"),o.a.createElement(l.a,null,"Can you test as well that the saga is done after that?")),o.a.createElement(c.a,{fontSize:3},"Testing with redux-saga-test-plan"),o.a.createElement(l.a,null,"Testing with generators is useful, but it becomes easily a repetition of the code."),o.a.createElement(l.a,null,"With redux-saga-test-plan we can test the ",o.a.createElement("i",null,"intention")," of the code."),o.a.createElement(l.a,null,"For instance, we can assert that when we dispatch"," ",o.a.createElement("code",null,"TASK_PROCESS")," we will put ",o.a.createElement("code",null,"TASK_PROCESS_START"),"."),o.a.createElement(l.a,null,"Examine and run this code:"),o.a.createElement(i.a,{code:'import { expectSaga } from "redux-saga-test-plan";\nimport * as effects from "redux-saga/effects";\nimport { throwError } from \'redux-saga-test-plan/providers\';\n\nimport * as constants from "../actions/constants";\nimport { processTask, rootSaga, wsHandler, processTaskTimeConsuming } from "./rootSaga";\n\n//...\n\ntest("handles TASK_PROCESS!", () => {\n  return expectSaga(rootSaga)\n    .put({\n      type: constants.TASK_PROCESS_START,\n      name: "a name"\n    })\n\n    .dispatch({\n      type: constants.TASK_PROCESS,\n      name: "a name"\n    })\n    .run();\n});'}),o.a.createElement(l.a,null,"We can also mock effects with providers:"),o.a.createElement(i.a,{code:'test("handles TASK_PROCESS!", () => {\n  return expectSaga(rootSaga)\n    .provide([[effects.call(processTaskTimeConsuming), "mock return value"]])\n    .put({\n      type: constants.TASK_PROCESS_START,\n      name: "a name"\n    })\n\n    .dispatch({\n      type: constants.TASK_PROCESS,\n      name: "a name"\n    })\n    .run();\n});'}),o.a.createElement(l.a,null,"With providers we can avoid doing API calls or doing the actual calls."),o.a.createElement(l.a,null,"We can use also a provider to simulate an error:"),o.a.createElement(m.a,{code:'test("handles TASK_PROCESS!", () => {\n  return expectSaga(rootSaga)\n    .provide([[effects.call(processTaskTimeConsuming)]])\n    .put({\n      type: constants.TASK_PROCESS_START,\n      name: "a name"\n    })\n    .put({\n      type: constants.TASK_PROCESS_ERROR,\n      name: "a name"\n    })\n    .dispatch({\n      type: constants.TASK_DONE,\n      name: "a name"\n    })\n    .run();\n});'},o.a.createElement(l.a,null,"With this in mind can you test this flow?"),o.a.createElement(l.a,null,"When I dispatch ",o.a.createElement("code",null,"TASK_PROCESS"),", and there is no error in"," ",o.a.createElement("code",null,"processTaskConsuming"),", the saga will put an action of type"," ",o.a.createElement("code",null,"TASK_PROCESS_START")," and an action of type"," ",o.a.createElement("code",null,"TASK_PROCESS_DONE"),".")),o.a.createElement(m.a,{code:'test("handles TASK_PROCESS!", () => {\n  return expectSaga(rootSaga)\n    .provide([[effects.call(processTaskTimeConsuming), throwError("an error")]])\n    .put({\n      type: constants.TASK_PROCESS_START,\n      name: "a name"\n    })\n    .put({\n      type: constants.TASK_PROCESS_ERROR,\n      name: "a name"\n    })\n    .dispatch({\n      type: constants.TASK_PROCESS,\n      name: "a name"\n    })\n    .run();\n});'},o.a.createElement(l.a,null,"And this flow?"),o.a.createElement(l.a,null,"When I dispatch ",o.a.createElement("code",null,"TASK_PROCESS"),", and there is an error in"," ",o.a.createElement("code",null,"processTaskConsuming"),", the saga will put an action of type"," ",o.a.createElement("code",null,"TASK_PROCESS_START")," and an action of type"," ",o.a.createElement("code",null,"TASK_PROCESS_ERROR"),".")))}}}]);
//# sourceMappingURL=component---src-pages-testing-js-30c8d936f19f61056628.js.map